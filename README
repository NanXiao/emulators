------------------------------------------------------------------------
Emulator setup scripts
------------------------------------------------------------------------

These scripts were developed on Mac OS/Big Sur installed. And you should
use at your own risk. No warranty. Anything that breaks, you get to
mop up and keep all the pieces.

        NetBSD  OpenBSD FreeBSD Solaris Debian
-------------------------------------------------------------
i386    qemu    qemu    qemu    qemu
amd64   qemu    qemu    qemu    qemu+++ qemu
sparc64	qemu    qemu++  qemu**
sparc   qemu
macppc  qemu***
arm64   qemu* 

pmax    gxemul
cats	gxemul+

vax	simh

* see section 2
** has trouble booting with graphics (we use -nographic by default)
*** NetBSD 9.1 doesn't boot, we use 9.0
+ gxemul says it works, but I can't get 9.1 to install (it boots)
++ regular boot asks for the root device
+++ Solaris 10 for i386, 11 for amd64

------------------------------------------------------------------------
1. Qemu
------------------------------------------------------------------------

use-qemu-vm.sh [-i] [-c] [-n] [-d] [-t TargetDir] [OS [arch [ver]]]
 -i run installer ISO (i.e. setup)
 -c use -display curses
 -n use -nographic (overrides -c)  
 -d more output  
    use -t to specify an alternative target directory for files
    
  OS can be NetBSD, OpenBSD, FreeBSD, Plan9, Debian or Solaris
 
   * Sets up or boots a Qemu VM with OS and arch
   * if you specify -i, you get the setup routine and the ISO will
     be downloaded if needed and where possible. The script will try
     to boot the ISO.
     if you specify -c, we'll try to use "-display curses"
   * if you set the QEMUTARGET variable, the VMs will be put there 
     instead of in $HOME/Qemu. -t overrides
   * if the file system image doesn't exist, the script will default
     to setup mode
   * The default is NetBSD/amd64
   * you need to install qemu and curl (needs ca-certificates on some
     host platforms such as NetBSD)
   * During the install it will make life easier if you setup the 
     machine for DHCP if possible
   * At the end of the install, exit to a shell and "shutdown -p now"
     if possible or "halt". If Qemu doesn't exit, you can CTRL-C it
     when the guest OS has ceased.
     
   * -c is useful for environments such as AWS or where there is no
     useful graphics library. -c seems to work better with i386 &
     amd64. -n is better for the other platforms.
   
(The setup-qemu-vm & run-qemu-vm scripts are still here, but they are
deprecated. It was silly having two scripts that did almost the same 
thing. I will be removing them soon. See README.OLD for docs on these.)

CTRL-C will kill an qemu if it is running in a graphics window.
CTRL-A x will exit a qemu running in nographic mode.

The following work:
* NetBSD/amd64, i386, sparc, sparc64 (all 9.1), macppc (9.0)
* OpenBSD/amd64, i386, sparc64 (all 6.8)
* FreeBSD/i386, amd64, sparc64 (all 12.2)
* Solaris 10/i386
* Solaris 11/amd64???
* Debian/amd64 (latest)
* Plan 9???

Quirks:
-------
* Make sure you are running Qemu >=5.2 if you want to run Sparc/Sparc64. 
  I cannot get these to boot on 5.1.
* There appears to be a bug in either Qemu or MacOS. I've seen this in
  a self-built Qemu (both 4.2.1 and 5.2) and 5.2 from homebrew. The 
  guest OS gets short reads on FTP and is missing a byte. I've written
  this up on my blog page.
* For Solaris, you will need to get the ISO images for x86 from Oracle
* NetBSD/macppc is slightly more involved:
      When booting normally, I setup the boot to fail to drop to
      the boot prompt. To boot type:

      netbsd.macppc -a

      The -a will instruct netbsd to ask you for the root filesystem 
      - use wd0a. The run script needs the iso to be present on the filesystem for something valid for OpenFirmware to book. You could put a kernel and OpenFirmware boot program on an iso image and
      use this instead. 

      DHCP will not work (I think due to the lack of BPF on the interface) - you can setup a static IP. e.g. 10.0.2.100/255.255.255.0 gateway 10.0.2.2 and DNS 10.0.2.3.

* FreeBSD/sparc64 - only boots -nographic so I've made this the default

Does not work:
--------------

* OpenBSD/macppc - can get it to the bootloader but it panics.
  With pmu options I can get the system to go further but it panics when
  probing the usb bus.
* FreeBSD/powerppc - hangs/panics during probe of vgapci0
* Solaris 10/sparc64 - doesn't boot (I read somewhere that the processor
  emulated in the VM is not sufficient for Solaris 10. Older versions
  might work.)
* NetBSD/arc doesn't boot -  but apparently others have had success.

See also: 

* https://chrispinnock.com/stuff/running-systems-in-qemu/

The sparc64 bit was based on work in this article:
* https://virtuallyfun.com/wordpress/2015/01/14/netbsd-6-1-5-sparc64-on-qemu/
* https://wiki.qemu.org/Documentation/Platforms/SPARC

This was helpful for NetBSD/MacPPC:
* https://wiki.qemu.org/Documentation/Platforms/PowerPC

------------------------------------------------------------------------
2. Qemu for NetBSD/arm64
------------------------------------------------------------------------

* Use setup-arm64.sh to get the latest bits and pieces including 
working firmware and root filesystem. This will also resize the filesystem
to 10G
* Use run-arm64.sh to run it. Inside the script you can change the
graphics options easily if you prefer not to run headless

------------------------------------------------------------------------
3. Gxemul
------------------------------------------------------------------------

./use-gxemul-vm.sh [-i] [OS [arch]]
will setup a VM running on gxemul on the first run (or with -i)
and will run it if it is setup already.

Gxemul builds nicely from sources on Mac OS X. You will need X11 (e.g.
XQuartz).

The following work:
* NetBSD/pmax 

(I've not tried many others at this point)

The following don't work:
* NetBSD/cats - boots but panics during base.tgz extract

------------------------------------------------------------------------
4. Simh & NetBSD/vax
------------------------------------------------------------------------

./use-simh-vm.sh [-i]
* Will help setup a NetBSD/vax virtual machine with SIMH
* SIMH needs to be installed first
* The first time you will need to type boot dua1:     
  not dual - it's a 1.
* For normal operation, you will need to type boot dua0:

